# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

--Who are the top 10 artists based on popularity?

SELECT artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY MAX(popularity) desc 
LIMIT 10;

--What are the top 10 most danceable and highest energy songs and who are the artists?

SELECT track_name, artist_name
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY SUM(danceability+energy) desc
LIMIT 10;

--What is the number of songs with a fast tempo, average tempo, slow tempo?

SELECT COUNT(track_name)AS total_tracks,
CASE WHEN tempo>=150 THEN "Fast Tempo"
WHEN tempo>=100 THEN "AVG Tempo"
ELSE "Slow Tempo"
END AS tempo_pace
FROM BIT_DB.Spotifydata
GROUP BY tempo_pace;

--Which artists have songs over four minutes long?

SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
WHERE duration_ms>240000
ORDER BY duration_ms desc;

--What is the average song duration, for songs with a speechiness of at least 0.08?

SELECT AVG(duration_ms)AS AVG_song_duration
FROM BIT_DB.Spotifydata
WHERE speechiness>=0.08
HAVING AVG(duration_ms);
